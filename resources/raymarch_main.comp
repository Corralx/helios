void normal(in vec3 point, out vec3 normal)
{
	const vec3 v = vec3(0.0001f, 0, 0);

	normal = normalize(vec3(
		scene(point + v) - scene(point - v),
		scene(point + v.yxz) - scene(point - v.yxz),
		scene(point + v.zyx) - scene(point - v.zyx)));
}

float shadow(in vec3 origin, in vec3 light_vector, in float k)
{
	float res = 1.0;

    for (float t = 0.03f; t < 5.0f;)
    {
        float h = scene(origin + light_vector * t);
        if (h < epsilon)
            return 0.0;
#ifdef SOFT_SHADOW
        res = min(res, k * h / t);
#endif
        t += h;
    }

    return res;
}

float ambient_occlusion(in vec3 point, in vec3 normal)
{
	float stepSize = 0.01f;
	float t = stepSize;
	float oc = 0.0f;
	for (int i = 0; i < 5; ++i)
	{
		float d = scene(point + normal * t);
		oc += t - d;
		t += stepSize;
	}

	return clamp(oc, .0f, 1.f);
}


void shade(in vec3 p, in vec3 light_vector, out vec3 color)
{
	vec3 n;
	normal(p, n);

	float l_dot_n = max(dot(light_vector, n), 0.0);

	color = light_color * l_dot_n;
	#ifdef ENABLE_SHADOW
	color *= shadow(p, light_vector, 128.0f) + 0.2f;
	#endif
	#ifdef ENABLE_AMBIENT_OCCLUSION
	color *= 1.0f - ambient_occlusion(p, n);
	#endif
}

void main()
{	
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    if (coord.x > (screen_width - 1) || coord.y > (screen_height - 1))
    	return;

    float screen_width_f = screen_width;
    float screen_height_f = screen_height;
    float aspect_ratio = screen_width_f / screen_height_f;

	vec3 light_vector = normalize(-light_direction);

	float t = 1.0;
    const int max_iterations = 200;
	int iterations;

	float u = coord.x * 2.0 / screen_width_f - 1.0;
    float v = coord.y * 2.0 / screen_height_f - 1.0;

    vec3 ray_dir = normalize(camera_view * focal_length + camera_right * u * aspect_ratio + camera_up * v);

	vec3 p;
	vec3 color_out = vec3(0.0, 1.0, 0.0);

	for (iterations = 0; iterations < max_iterations; ++iterations)
    {
	    p = camera_position + ray_dir * t;
        float d = scene(p);
		
		t += d;
		if (t > z_far)
			break;

		if (d < epsilon)
		{
			shade(p, light_vector, color_out);
			break;
		}
    }

	imageStore(output_image, coord, vec4(color_out, 1.0));
}
